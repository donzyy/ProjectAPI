// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectAPI.DatabaseContext;

namespace ProjectAPI.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230420234609_AddFKDriverCustomerPaymentTypeTrucksProductProductBatchProductTypePurchaseOrderAndTheRest")]
    partial class AddFKDriverCustomerPaymentTypeTrucksProductProductBatchProductTypePurchaseOrderAndTheRest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectAPI.Model.Computer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComputerLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComputerNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("ProjectAPI.Model.Customer", b =>
                {
                    b.Property<int>("Customer_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Customer_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Customer_Phone_Number")
                        .HasColumnType("int");

                    b.Property<int>("Customer_Postal_Code")
                        .HasColumnType("int");

                    b.Property<string>("Customer_Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customer_ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ProjectAPI.Model.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProjectAPI.Model.Driver", b =>
                {
                    b.Property<int>("Driver_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Driver_FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Driver_LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Driver_License_Number")
                        .HasColumnType("int");

                    b.Property<string>("Driver_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Driver_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Truck_ID")
                        .HasColumnType("int");

                    b.HasKey("Driver_ID");

                    b.HasIndex("Truck_ID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ProjectAPI.Model.Employee", b =>
                {
                    b.Property<int>("Employee_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Department_ID")
                        .HasColumnType("int");

                    b.Property<string>("Employee_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Employee_Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employee_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employee_First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Employee_Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employee_Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employee_Phone_Number")
                        .HasColumnType("int");

                    b.Property<double>("Employee_Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("Employee_Status")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Employee_Termination_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position_ID")
                        .HasColumnType("int");

                    b.HasKey("Employee_ID");

                    b.HasIndex("Department_ID");

                    b.HasIndex("Position_ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectAPI.Model.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("ProjectAPI.Model.PaymentType", b =>
                {
                    b.Property<int>("PaymentType_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentType_Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentType_ID");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("ProjectAPI.Model.Position", b =>
                {
                    b.Property<int>("Position_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Position_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Position_ID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ProjectAPI.Model.Product", b =>
                {
                    b.Property<int>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Product_Batch_ID")
                        .HasColumnType("int");

                    b.Property<string>("Product_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Product_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Product_Type_ID")
                        .HasColumnType("int");

                    b.HasKey("Product_ID");

                    b.HasIndex("Product_Batch_ID");

                    b.HasIndex("Product_Type_ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProjectAPI.Model.ProductBatch", b =>
                {
                    b.Property<int>("ProductBatch_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductBatch_Number")
                        .HasColumnType("int");

                    b.Property<double>("ProductBatch_Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionBatch_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductBatch_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("ProductBatches");
                });

            modelBuilder.Entity("ProjectAPI.Model.ProductType", b =>
                {
                    b.Property<int>("ProductType_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductType_Name")
                        .HasColumnType("int");

                    b.HasKey("ProductType_ID");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("ProjectAPI.Model.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrder_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PurchaseOrder_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrder_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseOrder_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchaseOrder_Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Supplier_ID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrder_ID");

                    b.HasIndex("Supplier_ID");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ProjectAPI.Model.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetail_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderDetail_Qty_Received")
                        .HasColumnType("int");

                    b.Property<float>("PurchaseOrderDetail_Quantity")
                        .HasColumnType("real");

                    b.Property<decimal>("PurchaseOrderDetail_Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchaseOrderDetail_Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseOrder_ID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderDetail_ID");

                    b.HasIndex("Product_ID");

                    b.HasIndex("PurchaseOrder_ID");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ProjectAPI.Model.Register", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("ProjectAPI.Model.Sales", b =>
                {
                    b.Property<int>("Sales_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Customer_ID")
                        .HasColumnType("int");

                    b.Property<int>("Driver_ID")
                        .HasColumnType("int");

                    b.Property<int>("Payment_Type_ID")
                        .HasColumnType("int");

                    b.Property<int>("SalesMan_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Sales_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Sales_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Truck_ID")
                        .HasColumnType("int");

                    b.HasKey("Sales_ID");

                    b.HasIndex("Customer_ID");

                    b.HasIndex("Driver_ID");

                    b.HasIndex("Payment_Type_ID");

                    b.HasIndex("SalesMan_ID");

                    b.HasIndex("Truck_ID");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ProjectAPI.Model.SalesDetails", b =>
                {
                    b.Property<int>("SalesDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<int>("SalesDetails_Price")
                        .HasColumnType("int");

                    b.Property<int>("SalesDetails_Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesDetails_Tax")
                        .HasColumnType("int");

                    b.Property<int>("SalesDetails_Total")
                        .HasColumnType("int");

                    b.Property<int>("Sales_ID")
                        .HasColumnType("int");

                    b.HasKey("SalesDetails_ID");

                    b.HasIndex("Product_ID");

                    b.HasIndex("Sales_ID");

                    b.ToTable("SalesDetails");
                });

            modelBuilder.Entity("ProjectAPI.Model.SalesMan", b =>
                {
                    b.Property<int>("SalesMan_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SalesMan_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesMan_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesMan_FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesMan_GhanaPostAddress")
                        .HasColumnType("int");

                    b.Property<string>("SalesMan_LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesMan_Phone_Number")
                        .HasColumnType("int");

                    b.HasKey("SalesMan_ID");

                    b.ToTable("SalesMen");
                });

            modelBuilder.Entity("ProjectAPI.Model.Supplier", b =>
                {
                    b.Property<int>("Supplier_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Supplier_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier_Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Supplier_ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ProjectAPI.Model.Truck", b =>
                {
                    b.Property<int>("Truck_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Truck_Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Truck_Plate_Number")
                        .HasColumnType("int");

                    b.Property<string>("Truck_Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Truck_ID");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("ProjectAPI.Model.Driver", b =>
                {
                    b.HasOne("ProjectAPI.Model.Truck", "Truck")
                        .WithMany("Drivers")
                        .HasForeignKey("Truck_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("ProjectAPI.Model.Employee", b =>
                {
                    b.HasOne("ProjectAPI.Model.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("Position_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ProjectAPI.Model.Product", b =>
                {
                    b.HasOne("ProjectAPI.Model.ProductBatch", "ProductBatch")
                        .WithMany()
                        .HasForeignKey("Product_Batch_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("Product_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBatch");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProjectAPI.Model.ProductBatch", b =>
                {
                    b.HasOne("ProjectAPI.Model.Product", "Product")
                        .WithMany("ProductBatches")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectAPI.Model.PurchaseOrder", b =>
                {
                    b.HasOne("ProjectAPI.Model.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Supplier_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ProjectAPI.Model.PurchaseOrderDetail", b =>
                {
                    b.HasOne("ProjectAPI.Model.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrder_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ProjectAPI.Model.Sales", b =>
                {
                    b.HasOne("ProjectAPI.Model.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.Driver", "Driver")
                        .WithMany("Sales")
                        .HasForeignKey("Driver_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.PaymentType", "PaymentType")
                        .WithMany("Sales")
                        .HasForeignKey("Payment_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.SalesMan", "SalesMan")
                        .WithMany("Sales")
                        .HasForeignKey("SalesMan_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.Truck", "Truck")
                        .WithMany("Sales")
                        .HasForeignKey("Truck_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("PaymentType");

                    b.Navigation("SalesMan");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("ProjectAPI.Model.SalesDetails", b =>
                {
                    b.HasOne("ProjectAPI.Model.Product", "Product")
                        .WithMany("SalesDetails")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAPI.Model.Sales", "Sales")
                        .WithMany("SalesDetails")
                        .HasForeignKey("Sales_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ProjectAPI.Model.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ProjectAPI.Model.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ProjectAPI.Model.Driver", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ProjectAPI.Model.PaymentType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ProjectAPI.Model.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ProjectAPI.Model.Product", b =>
                {
                    b.Navigation("ProductBatches");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("ProjectAPI.Model.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProjectAPI.Model.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ProjectAPI.Model.Sales", b =>
                {
                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("ProjectAPI.Model.SalesMan", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ProjectAPI.Model.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("ProjectAPI.Model.Truck", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
